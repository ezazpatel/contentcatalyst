import { useRef, useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useToast } from "@/hooks/use-toast";
import { csvUploadSchema, InsertBlogPost } from "@shared/schema";
import Papa from "papaparse";
import { Upload, Download } from "lucide-react";

interface CSVUploadProps {
  onUpload: (data: InsertBlogPost[]) => void;
}

export function CSVUpload({ onUpload }: CSVUploadProps) {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();
  const [isProcessing, setIsProcessing] = useState(false);

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setIsProcessing(true);
    toast({
      title: "Processing CSV",
      description: "Please wait while we process your file...",
    });

    Papa.parse(file, {
      header: true,
      complete: (results) => {
        try {
          const processedData = results.data.map((row: any, index: number) => {
            try {
              // First validate the CSV row structure
              const validatedRow = csvUploadSchema.parse(row);

              // Process affiliate links - split both names and URLs and match them
              const affiliateNames = validatedRow.affiliateName ? validatedRow.affiliateName.split('|').map(name => name.trim()) : [];
              const affiliateUrls = validatedRow.affiliateUrl ? validatedRow.affiliateUrl.split('|').map(url => url.trim()) : [];

              // Create affiliate links array by matching names with URLs
              const affiliateLinks = affiliateNames.map((name, index) => ({
                name,
                url: affiliateUrls[index] || '' // Use empty string if no matching URL found
              })).filter(link => link.name && link.url); // Filter out incomplete pairs

              // Combine date and time
              const scheduledDateTime = validatedRow.scheduledTime 
                ? new Date(`${validatedRow.scheduledDate} ${validatedRow.scheduledTime}`)
                : new Date(validatedRow.scheduledDate);

              // Validate date is in the future
              const now = new Date();
              if (scheduledDateTime <= now) {
                throw new Error(`The scheduled date must be in the future`);
              }

              // Process internal links
              const internalLinks = validatedRow.internalLinkTitle ? [{
                title: validatedRow.internalLinkTitle,
                url: validatedRow.internalLinkUrl || '',
                description: validatedRow.internalLinkDesc || ''
              }] : [];

              // Transform CSV data to match BlogPost structure
              return {
                title: validatedRow.title || `Blog Post About ${validatedRow.keywords}`,
                keywords: validatedRow.keywords.split(',').map(k => k.trim()),
                content: "", // Content will be generated by the AI
                status: 'scheduled',
                description: validatedRow.description || '',
                seoTitle: validatedRow.seoTitle || '',
                seoDescription: validatedRow.seoDescription || '',
                scheduledDate: scheduledDateTime,
                affiliateLinks,
                internalLinks
              } as InsertBlogPost;
            } catch (error) {
              // Handle row-specific errors
              throw new Error(`Error in row ${index + 2}: ${error instanceof Error ? error.message : 'Invalid data format'}`);
            }
          });

          onUpload(processedData);
          toast({
            title: "Success",
            description: `Successfully processed ${processedData.length} posts from CSV`,
          });

          // Clear the input
          if (fileInputRef.current) {
            fileInputRef.current.value = '';
          }
        } catch (error) {
          console.error("CSV Processing Error:", error);
          toast({
            title: "Error Processing CSV",
            description: error instanceof Error ? error.message : "Please check the CSV format matches the template",
            variant: "destructive",
          });
        } finally {
          setIsProcessing(false);
        }
      },
      error: (error) => {
        toast({
          title: "Error",
          description: "Could not read the CSV file. Please make sure it's properly formatted.",
          variant: "destructive",
        });
        setIsProcessing(false);
      }
    });
  };

  const downloadTemplate = () => {
    const template = "Keywords,Title,Scheduled Date,Scheduled Time,Affiliate Product Names,Affiliate Product URLs,Content Instructions,SEO Title,SEO Description,Internal Link Title,Internal Link URL,Internal Link Description\n" +
      "canada tourism,Best Places to Visit in Canada,2024-12-31,14:00,Canadian Gear|Winter Clothing,https://store.com/gear|https://store.com/winter,Write about top tourist destinations focusing on seasonal activities,,,,,,";

    const blob = new Blob([template], { type: "text/csv" });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "blog-template.csv";
    a.click();
    window.URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center gap-4">
        <Input
          type="file"
          accept=".csv"
          ref={fileInputRef}
          onChange={handleFileUpload}
          className="hidden"
        />
        <Button 
          variant="secondary" 
          className="bg-black text-white hover:bg-gray-900" 
          onClick={() => fileInputRef.current?.click()}
          disabled={isProcessing}
        >
          <Upload className="h-4 w-4 mr-2" />
          {isProcessing ? "Processing..." : "Upload CSV"}
        </Button>
        <Button variant="outline" onClick={downloadTemplate}>
          <Download className="h-4 w-4 mr-2" />
          Download Template
        </Button>
      </div>
    </div>
  );
}